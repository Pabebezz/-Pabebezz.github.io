<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pabebe&#39;s Blog</title>
  
  <subtitle>业精于勤，荒于嬉；行成于思，毁于随。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pabebezz.github.io/"/>
  <updated>2021-04-19T08:01:18.238Z</updated>
  <id>https://pabebezz.github.io/</id>
  
  <author>
    <name>Pabebe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++常见面试题总结</title>
    <link href="https://pabebezz.github.io/article/44f6a7d2/"/>
    <id>https://pabebezz.github.io/article/44f6a7d2/</id>
    <published>2021-04-19T07:56:11.000Z</published>
    <updated>2021-04-19T08:01:18.238Z</updated>
    
    <summary type="html">
    
      进行中
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>for(auto &amp;i:s)和for(auto i:s)的区别</title>
    <link href="https://pabebezz.github.io/article/4aa05e8/"/>
    <id>https://pabebezz.github.io/article/4aa05e8/</id>
    <published>2021-04-19T06:19:38.000Z</published>
    <updated>2021-04-19T08:01:18.240Z</updated>
    
    <summary type="html">
    
      for(auto i:s)相当于拷贝，不改变s的值，详情请点击~
    
    </summary>
    
      <category term="C++" scheme="https://pabebezz.github.io/categories/C/"/>
    
    
      <category term="C++ Primer" scheme="https://pabebezz.github.io/tags/C-Primer/"/>
    
  </entry>
  
  <entry>
    <title>常函数的运用</title>
    <link href="https://pabebezz.github.io/article/e17bc1d7/"/>
    <id>https://pabebezz.github.io/article/e17bc1d7/</id>
    <published>2021-04-17T09:03:52.000Z</published>
    <updated>2021-04-17T10:11:49.361Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;统计一段词中出现次数最多的高频词（不区分大小写）&lt;/p&gt;
&lt;p&gt;思路：用map存储每个词出现的频率（注意为什么不用unordered_map，因为若想实现“不区分大小写”的功能，就必须添加一个自定义比较器，unordered_map不支持这一选项），然后用priority_queue优先级队列的小顶堆特性找到高频词（TOPK问题转换为TOP1）。&lt;/p&gt;
&lt;p&gt;（小顶堆求最大TOPK）堆（size = k）里存放的是当前元素的频率，其中堆顶的元素最小。加入新进来的元素，此时若size&amp;gt;k，弹出堆顶元素，调整堆。【大顶堆求最小TOPK类似】&lt;/p&gt;
&lt;p&gt;在写自定义比较器的过程中出现bug&lt;/p&gt;
&lt;p&gt;&lt;code&gt;错误    C3848    具有类型“const my_less”的表达式会丢失一些 const-volatile 限定符以调用“bool my_less::operator ()(const std::string &amp;amp;,const std::string &amp;amp;)”&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://pabebezz.github.io/categories/C/"/>
    
    
      <category term="C++ Primer" scheme="https://pabebezz.github.io/tags/C-Primer/"/>
    
  </entry>
  
  <entry>
    <title>线性表、顺序表、广义表（其表头表尾）</title>
    <link href="https://pabebezz.github.io/article/13827808/"/>
    <id>https://pabebezz.github.io/article/13827808/</id>
    <published>2021-04-16T13:02:48.000Z</published>
    <updated>2021-04-17T10:13:49.160Z</updated>
    
    <summary type="html">
    
      注意广义表的特殊性
    
    </summary>
    
      <category term="Programming" scheme="https://pabebezz.github.io/categories/Programming/"/>
    
    
      <category term="数据结构" scheme="https://pabebezz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>为什么拷贝构造函数参数必须为引用？</title>
    <link href="https://pabebezz.github.io/article/c13c7aad/"/>
    <id>https://pabebezz.github.io/article/c13c7aad/</id>
    <published>2021-04-09T13:08:03.000Z</published>
    <updated>2021-04-16T11:58:56.859Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天朋友问我一个特别有意思的点，eg：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; m_age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *m_height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;//构造函数  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Person(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; h) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m_age = p.m_age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		&lt;span class=&quot;comment&quot;&gt;//堆区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m_height = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(h);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//拷贝构造函数  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Person(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Person&amp;amp; p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;拷贝构造函数!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m_age = p.m_age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//m_height =   p.m_heigh (浅拷贝，系统默认拷贝构造函数)　 //m_height 是指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m_height = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(*p.m_height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Person &lt;span class=&quot;title&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Person &lt;span class=&quot;title&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(p1)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论是系统默认还是自定义的拷贝构造函数，都是传一个&lt;code&gt;引用&lt;/code&gt;，而不是&lt;code&gt;值&lt;/code&gt;，这是为什么呢？&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="https://pabebezz.github.io/categories/C/"/>
    
    
      <category term="C++ Primer" scheme="https://pabebezz.github.io/tags/C-Primer/"/>
    
  </entry>
  
  <entry>
    <title>打怪之旅-C++基础</title>
    <link href="https://pabebezz.github.io/article/23d2b7d5/"/>
    <id>https://pabebezz.github.io/article/23d2b7d5/</id>
    <published>2021-03-01T09:53:37.000Z</published>
    <updated>2021-04-19T08:00:19.227Z</updated>
    
    <summary type="html">
    
      过一遍语法知识
    
    </summary>
    
      <category term="Programming" scheme="https://pabebezz.github.io/categories/Programming/"/>
    
    
      <category term="code" scheme="https://pabebezz.github.io/tags/code/"/>
    
      <category term="C++" scheme="https://pabebezz.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>打怪之旅-计算机网络</title>
    <link href="https://pabebezz.github.io/article/6cc0fe42/"/>
    <id>https://pabebezz.github.io/article/6cc0fe42/</id>
    <published>2021-02-03T00:53:37.000Z</published>
    <updated>2021-04-17T13:33:36.256Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;术语&quot;&gt;&lt;a href=&quot;#术语&quot; class=&quot;headerlink&quot; title=&quot;术语&quot;&gt;&lt;/a&gt;术语&lt;/h1&gt;&lt;p&gt;ISP (Internet Service Provider)&lt;/p&gt;
&lt;p&gt;RFC (Request For Comments)因特网标准&lt;/p&gt;
&lt;p&gt;ISOC因特网协会&lt;/p&gt;
&lt;p&gt;实体：任何可发送或接受信息的硬件或软件进程&lt;/p&gt;
&lt;p&gt;对等实体:收发双方相同层次中的实体&lt;/p&gt;
&lt;p&gt;协议: 控制两个对等实体进行逻辑通信的规则集合（三要素：语法－定义所交换信息的格式；语义－定义收发双方所要完成的操作；同步－定义收发双方的时许关系）&lt;/p&gt;
&lt;p&gt;服务：在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务．&lt;/p&gt;
&lt;p&gt;服务访问点：同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同的服务类型．（eg:数据链路层的点为帧的＂类型＂字段，网络层的点为IP数据报首部中的＂协议字段＂，运输层的点为＂端口号＂）&lt;/p&gt;
&lt;p&gt;服务原语：上层使用下层所提供的服务，必须与下层交换的命令．&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PDU－协议数据单元：对等层次之间传送的数据包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SDU－服务数据单元：同一系统内，层与层之间交换的数据报&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/article/6cc0fe42/image-20210322170050493.png&quot; alt=&quot;image-20210322170050493&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Operating" scheme="https://pabebezz.github.io/categories/Computer-Operating/"/>
    
    
      <category term="study notes" scheme="https://pabebezz.github.io/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>打怪之旅-操作系统</title>
    <link href="https://pabebezz.github.io/article/e0627a3a/"/>
    <id>https://pabebezz.github.io/article/e0627a3a/</id>
    <published>2021-01-30T00:53:37.000Z</published>
    <updated>2021-04-14T09:21:11.433Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;所有网络协议也都是采用大端字节序的方式来传输数据的。所以有时我们把大端字节序方式称之为网络字节序&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Computer Operating" scheme="https://pabebezz.github.io/categories/Computer-Operating/"/>
    
    
      <category term="study notes" scheme="https://pabebezz.github.io/tags/study-notes/"/>
    
  </entry>
  
  <entry>
    <title>打怪之旅-数据结构与算法</title>
    <link href="https://pabebezz.github.io/article/737c8fe7/"/>
    <id>https://pabebezz.github.io/article/737c8fe7/</id>
    <published>2021-01-24T09:53:37.000Z</published>
    <updated>2021-04-17T09:41:29.092Z</updated>
    
    <summary type="html">
    
      leetcode刷题记录以及总结
    
    </summary>
    
      <category term="Programming" scheme="https://pabebezz.github.io/categories/Programming/"/>
    
    
      <category term="code" scheme="https://pabebezz.github.io/tags/code/"/>
    
      <category term="C++" scheme="https://pabebezz.github.io/tags/C/"/>
    
      <category term="algorithm" scheme="https://pabebezz.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>paperMemo-prepare</title>
    <link href="https://pabebezz.github.io/article/5dace05d/"/>
    <id>https://pabebezz.github.io/article/5dace05d/</id>
    <published>2020-12-06T09:31:26.000Z</published>
    <updated>2021-04-08T09:19:41.699Z</updated>
    
    <summary type="html">
    
      论文准备工作，不上传
    
    </summary>
    
      <category term="Scientific Research" scheme="https://pabebezz.github.io/categories/Scientific-Research/"/>
    
    
      <category term="paper" scheme="https://pabebezz.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>理财小知识</title>
    <link href="https://pabebezz.github.io/article/d95dcfe5/"/>
    <id>https://pabebezz.github.io/article/d95dcfe5/</id>
    <published>2020-11-27T02:46:45.000Z</published>
    <updated>2020-11-27T03:03:35.771Z</updated>
    
    <summary type="html">
    
      涉猎
    
    </summary>
    
      <category term="Finance" scheme="https://pabebezz.github.io/categories/Finance/"/>
    
    
      <category term="tutorial" scheme="https://pabebezz.github.io/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>迁移Ubuntu18.04至新硬盘</title>
    <link href="https://pabebezz.github.io/article/2f7fc36c/"/>
    <id>https://pabebezz.github.io/article/2f7fc36c/</id>
    <published>2020-10-13T05:15:22.000Z</published>
    <updated>2020-10-14T23:27:14.803Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/article/2f7fc36c/image-20201013185814230.png&quot; alt=&quot;image-20201013185814230&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Ubuntu" scheme="https://pabebezz.github.io/categories/Ubuntu/"/>
    
    
      <category term="tutorial" scheme="https://pabebezz.github.io/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>日期提醒python程序</title>
    <link href="https://pabebezz.github.io/article/61f6d1ab/"/>
    <id>https://pabebezz.github.io/article/61f6d1ab/</id>
    <published>2020-08-28T03:49:43.000Z</published>
    <updated>2020-08-28T04:00:02.155Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; class=&quot;headerlink&quot; title=&quot;why&quot;&gt;&lt;/a&gt;why&lt;/h1&gt;&lt;p&gt;因为英文版ipone没有农历日期提醒（挺不方便的），&lt;/p&gt;
&lt;p&gt;所以实现了个日期提醒python程序。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://pabebezz.github.io/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://pabebezz.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>深度学习踩坑实录</title>
    <link href="https://pabebezz.github.io/article/43ed33f1/"/>
    <id>https://pabebezz.github.io/article/43ed33f1/</id>
    <published>2020-08-20T07:34:58.000Z</published>
    <updated>2020-08-29T04:26:19.252Z</updated>
    
    <summary type="html">
    
      在踩坑中。
    
    </summary>
    
      <category term="deep learning" scheme="https://pabebezz.github.io/categories/deep-learning/"/>
    
    
      <category term="Python" scheme="https://pabebezz.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Arachne：Core-Aware Thread Management</title>
    <link href="https://pabebezz.github.io/article/8a41b866/"/>
    <id>https://pabebezz.github.io/article/8a41b866/</id>
    <published>2020-08-10T04:54:45.000Z</published>
    <updated>2020-08-29T04:26:42.152Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Arachne：核心感知线程管理&quot;&gt;&lt;a href=&quot;#Arachne：核心感知线程管理&quot; class=&quot;headerlink&quot; title=&quot;Arachne：核心感知线程管理&quot;&gt;&lt;/a&gt;Arachne：核心感知线程管理&lt;/h1&gt;&lt;p&gt;本文包含在第13届USENIX操作系统设计和实现研讨会(OSDI’18)的会议记录中。&lt;/p&gt;
&lt;p&gt; 主要分为三个模块：&lt;/p&gt;
&lt;h3 id=&quot;1-Arachne的设计与评估&quot;&gt;&lt;a href=&quot;#1-Arachne的设计与评估&quot; class=&quot;headerlink&quot; title=&quot;1.  Arachne的设计与评估&quot;&gt;&lt;/a&gt;1.  Arachne的设计与评估&lt;/h3&gt;&lt;h3 id=&quot;2-Arachne应用于memcache的优点&quot;&gt;&lt;a href=&quot;#2-Arachne应用于memcache的优点&quot; class=&quot;headerlink&quot; title=&quot;2.  Arachne应用于memcache的优点&quot;&gt;&lt;/a&gt;2.  Arachne应用于memcache的优点&lt;/h3&gt;&lt;h3 id=&quot;3-Arachne应用于RAMcloud的优点&quot;&gt;&lt;a href=&quot;#3-Arachne应用于RAMcloud的优点&quot; class=&quot;headerlink&quot; title=&quot;3.  Arachne应用于RAMcloud的优点&quot;&gt;&lt;/a&gt;3.  Arachne应用于RAMcloud的优点&lt;/h3&gt;&lt;h3 id=&quot;（理解第一部分就较容易理解第二、三部分）&quot;&gt;&lt;a href=&quot;#（理解第一部分就较容易理解第二、三部分）&quot; class=&quot;headerlink&quot; title=&quot;（理解第一部分就较容易理解第二、三部分）&quot;&gt;&lt;/a&gt;（理解第一部分就较容易理解第二、三部分）&lt;/h3&gt;&lt;p&gt;温馨提示：&lt;/p&gt;
&lt;p&gt;注意：我们使用术语核心core来表示可以支持独立计算线程的任何硬件机制。在具有超线程的处理器中，我们将每个超线程视为单独的逻辑核心，即使其中一些共享单个物理核心。&lt;/p&gt;
    
    </summary>
    
      <category term="Scientific Research" scheme="https://pabebezz.github.io/categories/Scientific-Research/"/>
    
    
      <category term="paper" scheme="https://pabebezz.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>2020华为杯数学建模研赛</title>
    <link href="https://pabebezz.github.io/article/421938b8/"/>
    <id>https://pabebezz.github.io/article/421938b8/</id>
    <published>2020-08-08T03:45:55.000Z</published>
    <updated>2021-03-08T05:11:48.124Z</updated>
    
    <summary type="html">
    
      记录
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>window编译并运行TOY2DAC</title>
    <link href="https://pabebezz.github.io/article/71a7f63d/"/>
    <id>https://pabebezz.github.io/article/71a7f63d/</id>
    <published>2020-07-26T05:19:03.000Z</published>
    <updated>2020-08-10T05:05:00.930Z</updated>
    
    <summary type="html">
    
      TOY2DAC有关文档以及使用
    
    </summary>
    
      <category term="window" scheme="https://pabebezz.github.io/categories/window/"/>
    
    
      <category term="tutorial" scheme="https://pabebezz.github.io/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04下python安装并使用Oracle19.8</title>
    <link href="https://pabebezz.github.io/article/a8446d42/"/>
    <id>https://pabebezz.github.io/article/a8446d42/</id>
    <published>2020-07-26T05:12:12.000Z</published>
    <updated>2020-07-26T09:45:05.964Z</updated>
    
    <summary type="html">
    
      目前貌似木有比较完整最新版的安装指导，有些步骤都不需要啦，记录一下，免得走弯路。
    
    </summary>
    
      <category term="Ubuntu" scheme="https://pabebezz.github.io/categories/Ubuntu/"/>
    
    
      <category term="tutorial" scheme="https://pabebezz.github.io/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>python语法奇奇怪怪小合集</title>
    <link href="https://pabebezz.github.io/article/e58acc82/"/>
    <id>https://pabebezz.github.io/article/e58acc82/</id>
    <published>2020-07-15T09:41:54.000Z</published>
    <updated>2020-09-23T02:35:01.461Z</updated>
    
    <summary type="html">
    
      说是奇奇怪怪，只是自己没学通，记录一下python tip
    
    </summary>
    
      <category term="Programming" scheme="https://pabebezz.github.io/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://pabebezz.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>安装Ubuntu18.04后的优化</title>
    <link href="https://pabebezz.github.io/article/e0fdde43/"/>
    <id>https://pabebezz.github.io/article/e0fdde43/</id>
    <published>2020-07-05T02:00:51.000Z</published>
    <updated>2021-03-11T10:11:13.862Z</updated>
    
    <summary type="html">
    
      让乌邦图更美好
    
    </summary>
    
      <category term="Ubuntu" scheme="https://pabebezz.github.io/categories/Ubuntu/"/>
    
    
      <category term="tutorial" scheme="https://pabebezz.github.io/tags/tutorial/"/>
    
  </entry>
  
</feed>
